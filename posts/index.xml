<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Lamprey Labs</title>
        <link>https://lampreylabs.com/posts/</link>
        <description>Recent content in Posts on Lamprey Labs</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>This work is licensed under the GNU General Public License v3.0</copyright>
        <lastBuildDate>Wed, 24 Aug 2022 00:00:00 +0000</lastBuildDate>
        <atom:link href="https://lampreylabs.com/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Practical Reverse Engineering - Exercise 1, Page 35</title>
            <link>https://lampreylabs.com/posts/2022/08/practical-reverse-engineering-exercise-1-page-35/</link>
            <pubDate>Wed, 24 Aug 2022 00:00:00 +0000</pubDate>
            
            <guid>https://lampreylabs.com/posts/2022/08/practical-reverse-engineering-exercise-1-page-35/</guid>
            <description>Table of Contents  Question Answer  Question Repeat the walk-through by yourself. Draw the stack layout, including parameters and local variables.
Answer Here is the raw disassembly of the routine as generated by IDA Pro for reference:
.text:10001C60 ; =============== S U B R O U T I N E ======================================= .text:10001C60 .text:10001C60 ; Attributes: bp-based frame .text:10001C60 .text:10001C60 ; BOOL __stdcall DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved) .text:10001C60 _DllMain@12 proc near ; CODE XREF: DllEntryPoint+4B↓p .</description>
            <content type="html"><![CDATA[<h2 id="table-of-contents">Table of Contents</h2>
<ul>
<li><a href="#question">Question</a></li>
<li><a href="#answer">Answer</a></li>
</ul>
<h2 id="question">Question</h2>
<p>Repeat the walk-through by yourself. Draw the stack layout, including
parameters and local variables.</p>
<h2 id="answer">Answer</h2>
<p>Here is the raw <em>disassembly</em> of the routine as generated by <code>IDA Pro</code> for reference:</p>
<pre><code class="language-x86asm" data-lang="x86asm">.text:10001C60                                                  ; =============== S U B R O U T I N E =======================================
.text:10001C60
.text:10001C60                                                  ; Attributes: bp-based frame
.text:10001C60
.text:10001C60                                                  ; BOOL __stdcall DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)
.text:10001C60                                                  _DllMain@12     proc near               ; CODE XREF: DllEntryPoint+4B↓p
.text:10001C60
.text:10001C60                                                  pe              = PROCESSENTRY32 ptr -130h
.text:10001C60                                                  var_8           = byte ptr -8
.text:10001C60                                                  hinstDLL        = dword ptr  8
.text:10001C60                                                  fdwReason       = dword ptr  0Ch
.text:10001C60                                                  lpvReserved     = dword ptr  10h
.text:10001C60
.text:10001C60 000 55                                                           push    ebp
.text:10001C61 004 8B EC                                                        mov     ebp, esp
.text:10001C63 004 81 EC 30 01 00 00                                            sub     esp, 130h
.text:10001C69 134 57                                                           push    edi
.text:10001C6A 138 0F 01 4D F8                                                  sidt    fword ptr [ebp+var_8]
.text:10001C6E 138 8B 45 FA                                                     mov     eax, dword ptr [ebp+var_8+2]
.text:10001C71 138 3D 00 F4 03 80                                               cmp     eax, 8003F400h
.text:10001C76 138 76 10                                                        jbe     short loc_10001C88
.text:10001C78 138 3D 00 74 04 80                                               cmp     eax, 80047400h
.text:10001C7D 138 73 09                                                        jnb     short loc_10001C88
.text:10001C7F 138 33 C0                                                        xor     eax, eax
.text:10001C81 138 5F                                                           pop     edi
.text:10001C82 134 8B E5                                                        mov     esp, ebp
.text:10001C84 004 5D                                                           pop     ebp
.text:10001C85 000 C2 0C 00                                                     retn    0Ch
.text:10001C88                                                  ; ---------------------------------------------------------------------------
.text:10001C88
.text:10001C88                                                  loc_10001C88:                           ; CODE XREF: DllMain(x,x,x)+16↑j
.text:10001C88                                                                                          ; DllMain(x,x,x)+1D↑j
.text:10001C88 138 33 C0                                                        xor     eax, eax
.text:10001C8A 138 B9 49 00 00 00                                               mov     ecx, 49h ; 'I'
.text:10001C8F 138 8D BD D4 FE FF FF                                            lea     edi, [ebp+pe.cntUsage]
.text:10001C95 138 C7 85 D0 FE FF FF 00 00 00 00                                mov     [ebp+pe.dwSize], 0
.text:10001C9F 138 50                                                           push    eax             ; th32ProcessID
.text:10001CA0 13C 6A 02                                                        push    2               ; dwFlags
.text:10001CA2 140 F3 AB                                                        rep stosd
.text:10001CA4 140 E8 2D 2F 00 00                                               call    CreateToolhelp32Snapshot
.text:10001CA9 138 8B F8                                                        mov     edi, eax
.text:10001CAB 138 83 FF FF                                                     cmp     edi, 0FFFFFFFFh
.text:10001CAE 138 75 09                                                        jnz     short loc_10001CB9
.text:10001CB0 138 33 C0                                                        xor     eax, eax
.text:10001CB2 138 5F                                                           pop     edi
.text:10001CB3 134 8B E5                                                        mov     esp, ebp
.text:10001CB5 004 5D                                                           pop     ebp
.text:10001CB6 000 C2 0C 00                                                     retn    0Ch
.text:10001CB9                                                  ; ---------------------------------------------------------------------------
.text:10001CB9
.text:10001CB9                                                  loc_10001CB9:                           ; CODE XREF: DllMain(x,x,x)+4E↑j
.text:10001CB9 138 8D 85 D0 FE FF FF                                            lea     eax, [ebp+pe]
.text:10001CBF 138 56                                                           push    esi
.text:10001CC0 13C 50                                                           push    eax             ; lppe
.text:10001CC1 140 57                                                           push    edi             ; hSnapshot
.text:10001CC2 144 C7 85 D0 FE FF FF 28 01 00 00                                mov     [ebp+pe.dwSize], 128h
.text:10001CCC 144 E8 FF 2E 00 00                                               call    Process32First
.text:10001CD1 13C 85 C0                                                        test    eax, eax
.text:10001CD3 13C 74 4F                                                        jz      short loc_10001D24
.text:10001CD5 13C 8B 35 C0 50 00 10                                            mov     esi, ds:_stricmp
.text:10001CDB 13C 8D 8D F4 FE FF FF                                            lea     ecx, [ebp+pe.szExeFile]
.text:10001CE1 13C 68 50 7C 00 10                                               push    offset String2  ; &quot;explorer.exe&quot;
.text:10001CE6 140 51                                                           push    ecx             ; String1
.text:10001CE7 144 FF D6                                                        call    esi ; _stricmp
.text:10001CE9 144 83 C4 08                                                     add     esp, 8
.text:10001CEC 13C 85 C0                                                        test    eax, eax
.text:10001CEE 13C 74 26                                                        jz      short loc_10001D16
.text:10001CF0
.text:10001CF0                                                  loc_10001CF0:                           ; CODE XREF: DllMain(x,x,x)+B4↓j
.text:10001CF0 13C 8D 95 D0 FE FF FF                                            lea     edx, [ebp+pe]
.text:10001CF6 13C 52                                                           push    edx             ; lppe
.text:10001CF7 140 57                                                           push    edi             ; hSnapshot
.text:10001CF8 144 E8 CD 2E 00 00                                               call    Process32Next
.text:10001CFD 13C 85 C0                                                        test    eax, eax
.text:10001CFF 13C 74 23                                                        jz      short loc_10001D24
.text:10001D01 13C 8D 85 F4 FE FF FF                                            lea     eax, [ebp+pe.szExeFile]
.text:10001D07 13C 68 50 7C 00 10                                               push    offset String2  ; &quot;explorer.exe&quot;
.text:10001D0C 140 50                                                           push    eax             ; String1
.text:10001D0D 144 FF D6                                                        call    esi ; _stricmp
.text:10001D0F 144 83 C4 08                                                     add     esp, 8
.text:10001D12 13C 85 C0                                                        test    eax, eax
.text:10001D14 13C 75 DA                                                        jnz     short loc_10001CF0
.text:10001D16
.text:10001D16                                                  loc_10001D16:                           ; CODE XREF: DllMain(x,x,x)+8E↑j
.text:10001D16 13C 8B 85 E8 FE FF FF                                            mov     eax, [ebp+pe.th32ParentProcessID]
.text:10001D1C 13C 8B 8D D8 FE FF FF                                            mov     ecx, [ebp+pe.th32ProcessID]
.text:10001D22 13C EB 06                                                        jmp     short loc_10001D2A
.text:10001D24                                                  ; ---------------------------------------------------------------------------
.text:10001D24
.text:10001D24                                                  loc_10001D24:                           ; CODE XREF: DllMain(x,x,x)+73↑j
.text:10001D24                                                                                          ; DllMain(x,x,x)+9F↑j
.text:10001D24 13C 8B 45 0C                                                     mov     eax, [ebp+fdwReason]
.text:10001D27 13C 8B 4D 0C                                                     mov     ecx, [ebp+fdwReason]
.text:10001D2A
.text:10001D2A                                                  loc_10001D2A:                           ; CODE XREF: DllMain(x,x,x)+C2↑j
.text:10001D2A 13C 3B C1                                                        cmp     eax, ecx
.text:10001D2C 13C 5E                                                           pop     esi
.text:10001D2D 138 75 09                                                        jnz     short loc_10001D38
.text:10001D2F 138 33 C0                                                        xor     eax, eax
.text:10001D31 138 5F                                                           pop     edi
.text:10001D32 134 8B E5                                                        mov     esp, ebp
.text:10001D34 004 5D                                                           pop     ebp
.text:10001D35 000 C2 0C 00                                                     retn    0Ch
.text:10001D38                                                  ; ---------------------------------------------------------------------------
.text:10001D38
.text:10001D38                                                  loc_10001D38:                           ; CODE XREF: DllMain(x,x,x)+CD↑j
.text:10001D38 138 8B 45 0C                                                     mov     eax, [ebp+fdwReason]
.text:10001D3B 138 48                                                           dec     eax
.text:10001D3C 138 75 15                                                        jnz     short loc_10001D53
.text:10001D3E 138 6A 00                                                        push    0               ; lpThreadId
.text:10001D40 13C 6A 00                                                        push    0               ; dwCreationFlags
.text:10001D42 140 6A 00                                                        push    0               ; lpParameter
.text:10001D44 144 68 D0 32 00 10                                               push    offset StartAddress ; lpStartAddress
.text:10001D49 148 6A 00                                                        push    0               ; dwStackSize
.text:10001D4B 14C 6A 00                                                        push    0               ; lpThreadAttributes
.text:10001D4D 150 FF 15 20 50 00 10                                            call    ds:CreateThread
.text:10001D53
.text:10001D53                                                  loc_10001D53:                           ; CODE XREF: DllMain(x,x,x)+DC↑j
.text:10001D53 138 B8 01 00 00 00                                               mov     eax, 1
.text:10001D58 138 5F                                                           pop     edi
.text:10001D59 134 8B E5                                                        mov     esp, ebp
.text:10001D5B 004 5D                                                           pop     ebp
.text:10001D5C 000 C2 0C 00                                                     retn    0Ch
.text:10001D5C                                                  _DllMain@12     endp
</code></pre><p>Here&rsquo;s how the stack diagram looks like at the start of the <code>DllMain</code> routine:</p>
<p><img src="/img/initial-stack-diagram-sample_J.PNG" alt="initial-stack-diagram-sample_J" title="initial-stack-diagram-sample_J"></p>
<p>And here&rsquo;s how the local stack frame looks like after the execution of the function prologue:</p>
<p><img src="/img/stack-diagram-after-function-prologue-sample_J.PNG" alt="stack-diagram-after-function-prologue-sample_J" title="stack-diagram-after-function-prologue-sample_J"></p>
<p>Note how <code>0x130</code> worth of space is allocated on the stack in what can only be presumed is for storing the local variables. Also, note that the offsets are now relative to the base frame pointer.</p>
<p>We can see from the above disassembly that one of the local variables is a structure of type <a href="https://docs.microsoft.com/en-us/windows/win32/api/tlhelp32/ns-tlhelp32-processentry32?redirectedfrom=MSDN">PROCESSENTRY32</a>(which <code>IDA</code> rather ambiguously has named <code>pe</code>). Now, we know that <code>sizeof(pe) == 0x128</code> bytes but the program allocated <code>0x130</code> bytes worth of space on the stack for local variables. That must mean that the second local variable(<code>var_8</code>) is of size <code>0x8</code> bytes.</p>
<p>A little later into the disassembly just after the function prologue, we can see that <code>var_8</code> is indeed used to store the contents of the <code>IDTR</code> register using the <a href="https://namazso.github.io/x86/html/SIDT.html">sidt</a> instruction. In <code>x86</code> <code>nt</code>, the data structure used to represent the contents of the <code>GDTR</code> and <code>IDTR</code> registers is defined like so:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#0f0">//0x8 bytes(sizeof)
</span><span style="color:#0f0"></span><span style="color:#f00">typedef</span> <span style="color:#f00">struct</span> _DESCRIPTOR {
    USHORT Pad;   <span style="color:#0f0">// 0x0
</span><span style="color:#0f0"></span>    USHORT Limit; <span style="color:#0f0">// 0x2
</span><span style="color:#0f0"></span>    ULONG  Base;  <span style="color:#0f0">// 0x4
</span><span style="color:#0f0"></span>} KDESCRIPTOR, *PKDESCRIPTOR;
</code></pre></div><p>Ergo, <code>var_8</code> can be inferred to be of type <a href="https://www.vergiliusproject.com/kernels/x86/Windows%207/SP1/_DESCRIPTOR">KDESCRIPTOR</a> which also corroborates our previous size calculation.</p>
<p>So the complete stack layout can be illustrated like so:</p>
<p><img src="/img/complete-stack-diagram-sample_J.PNG" alt="complete-stack-diagram-sample_J" title="complete-stack-diagram-sample_J"></p>
<p>Finally, we can see a raw <em>decompilation</em> of the above routine using <code>Hex-Rays decompiler</code> on <a href="https://dogbolt.org/">https://dogbolt.org/</a>:</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79"> 1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79"> 2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79"> 3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79"> 4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79"> 5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79"> 6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79"> 7
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79"> 8
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79"> 9
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79">10
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79">11
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79">12
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79">13
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79">14
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79">15
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79">16
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79">17
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79">18
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79">19
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79">20
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79">21
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79">22
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79">23
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79">24
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79">25
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79">26
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79">27
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79">28
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79">29
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79">30
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79">31
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79">32
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79">33
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79">34
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79">35
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79">36
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79">37
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79">38
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79">39
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79">40
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79">41
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79">42
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#ee82ee">char</span> String2[] = <span style="color:#87ceeb">&#34;explorer.exe&#34;</span>; <span style="color:#0f0">// idb
</span><span style="color:#0f0"></span>
BOOL <span style="color:#f00">__stdcall</span> <span style="color:#ff0">DllMain</span>(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)
{
  HANDLE Toolhelp32Snapshot; <span style="color:#0f0">// edi
</span><span style="color:#0f0"></span>  DWORD th32ParentProcessID; <span style="color:#0f0">// eax
</span><span style="color:#0f0"></span>  DWORD th32ProcessID; <span style="color:#0f0">// ecx
</span><span style="color:#0f0"></span>  PROCESSENTRY32 pe; <span style="color:#0f0">// [esp+4h] [ebp-130h] BYREF
</span><span style="color:#0f0"></span>  _WORD v8[<span style="color:#f60">4</span>]; <span style="color:#0f0">// [esp+12Ch] [ebp-8h] BYREF
</span><span style="color:#0f0"></span>
  __sidt(v8);
  <span style="color:#f00">if</span> ( *(_DWORD *)&amp;v8[<span style="color:#f60">1</span>] &gt; <span style="color:#f60">0x8003F400</span> &amp;&amp; *(_DWORD *)&amp;v8[<span style="color:#f60">1</span>] &lt; <span style="color:#f60">0x80047400</span> )
    <span style="color:#f00">return</span> <span style="color:#f60">0</span>;
  memset(&amp;pe, <span style="color:#f60">0</span>, <span style="color:#f00">sizeof</span>(pe));
  Toolhelp32Snapshot = CreateToolhelp32Snapshot(<span style="color:#f60">2u</span>, <span style="color:#f60">0</span>);
  <span style="color:#f00">if</span> ( Toolhelp32Snapshot == (HANDLE)-<span style="color:#f60">1</span> )
    <span style="color:#f00">return</span> <span style="color:#f60">0</span>;
  pe.dwSize = <span style="color:#f60">296</span>;
  <span style="color:#f00">if</span> ( Process32First(Toolhelp32Snapshot, &amp;pe) )
  {
    <span style="color:#f00">if</span> ( !stricmp(pe.szExeFile, String2) )
    {
LABEL_10:
      th32ParentProcessID = pe.th32ParentProcessID;
      th32ProcessID = pe.th32ProcessID;
      <span style="color:#f00">goto</span> LABEL_12;
    }
    <span style="color:#f00">while</span> ( Process32Next(Toolhelp32Snapshot, &amp;pe) )
    {
      <span style="color:#f00">if</span> ( !stricmp(pe.szExeFile, String2) )
        <span style="color:#f00">goto</span> LABEL_10;
    }
  }
  th32ParentProcessID = fdwReason;
  th32ProcessID = fdwReason;
LABEL_12:
  <span style="color:#f00">if</span> ( th32ParentProcessID == th32ProcessID )
    <span style="color:#f00">return</span> <span style="color:#f60">0</span>;
  <span style="color:#f00">if</span> ( fdwReason == <span style="color:#f60">1</span> )
    CreateThread(<span style="color:#f60">0</span>, <span style="color:#f60">0</span>, StartAddress, <span style="color:#f60">0</span>, <span style="color:#f60">0</span>, <span style="color:#f60">0</span>);
  <span style="color:#f00">return</span> <span style="color:#f60">1</span>;
}
</code></pre></td></tr></table>
</div>
</div>]]></content>
        </item>
        
        <item>
            <title>Practical Reverse Engineering - Exercise 4, Page 17</title>
            <link>https://lampreylabs.com/posts/2022/07/practical-reverse-engineering-exercise-4-page-17/</link>
            <pubDate>Thu, 21 Jul 2022 00:00:00 +0000</pubDate>
            
            <guid>https://lampreylabs.com/posts/2022/07/practical-reverse-engineering-exercise-4-page-17/</guid>
            <description>Table of Contents  Question Answer  Question In all of the calling conventions explained, the return value is stored in a 32-bit register(EAX). What happens when the return value does not fit in a 32-bit register? Write a program to experiment and evaluate your answer. Does the mechanism change from compiler to compiler?
Answer Let us consider the following C code:
extern &amp;#34;C&amp;#34; __declspec(noinline) unsigned __int64 __stdcall fun( void ) { return 0x4141414142424242; } Compiling it with x86 msvc v19.</description>
            <content type="html"><![CDATA[<h2 id="table-of-contents">Table of Contents</h2>
<ul>
<li><a href="#question">Question</a></li>
<li><a href="#answer">Answer</a></li>
</ul>
<h2 id="question">Question</h2>
<p>In all of the calling conventions explained, the return value is stored in a 32-bit register(<code>EAX</code>). What happens when the return value does not fit in a 32-bit register? Write a program to experiment and evaluate your answer. Does the mechanism change from compiler to compiler?</p>
<h2 id="answer">Answer</h2>
<p>Let us consider the following <code>C</code> code:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#f00">extern</span> <span style="color:#87ceeb">&#34;C&#34;</span> <span style="color:#f00">__declspec</span>(noinline) <span style="color:#ee82ee">unsigned</span> <span style="color:#f00">__int64</span> <span style="color:#f00">__stdcall</span> fun(
  <span style="color:#ee82ee">void</span>
) {
  <span style="color:#f00">return</span> <span style="color:#f60">0x4141414142424242</span>;
}
</code></pre></div><p>Compiling it with <a href="https://godbolt.org/z/K4ab7soGP">x86 msvc v19.latest C/C++ compiler on godbolt.org</a> generates the following assembly code:</p>
<pre><code class="language-x86asm" data-lang="x86asm">_fun@0  PROC
        push    ebp
        mov     ebp, esp
        mov     eax, 1111638594                     ; 42424242H
        mov     edx, 1094795585                     ; 41414141H
        pop     ebp
        ret     0
_fun@0  ENDP
</code></pre><p>And compiling it with <a href="https://godbolt.org/z/f968MKfG6">x86-64 icx 2022.0.0(Intel next-gen LLVM-based C/C++ compiler)</a> generates identical assembly code(minus creation of the base frame pointer controlled by compiler options):</p>
<pre><code class="language-x86asm" data-lang="x86asm">fun:                                    # 
        mov     eax, 1111638594
        mov     edx, 1094795585
        ret
</code></pre><p>From the above, we can clearly see that the hard-coded 64-bit <em>integer value</em> is returned in <code>EDX:EAX</code>(the high-order <code>DWORD</code> is returned in <code>EDX</code> register and the low-order <code>DWORD</code> is returned in <code>EAX</code> register).</p>
<p>Although it certainly can change from compiler to compiler, this is all governed by a standardized <em>calling convention</em>(here seen using <code>Microsoft stdcall</code>). On the 32-bit <code>x86</code> architecture, all of the <code>C/C++</code> <em>calling conventions</em> adhere to the following rule(s) for returning <strong><em>integral types</em></strong>:</p>
<ol>
<li><strong>sizeof(return value) &lt;= 32 bits</strong>, return value is stored in <code>EAX</code></li>
<li><strong>32 bits &lt; sizeof(return value) &lt;= 64 bits</strong>, return value is stored in <code>EDX:EAX</code></li>
</ol>
<p>When <strong>sizeof(return value) &gt;= 64 bits</strong> or when returning large structures, the return value is stored in <code>EAX</code> register as a pointer to caller-allocated space on the stack that is passed to the callee as an implicit/hidden ﬁrst parameter on the stack.</p>
<p>For returning <strong><em>floating-point types</em></strong>, either the <code>SSE registers(XMM)</code> are used or are returned via the <code>x87 FPU</code> register stack.</p>
]]></content>
        </item>
        
        <item>
            <title>Practical Reverse Engineering - Exercise 3, Page 17</title>
            <link>https://lampreylabs.com/posts/2022/07/practical-reverse-engineering-exercise-3-page-17/</link>
            <pubDate>Wed, 20 Jul 2022 00:00:00 +0000</pubDate>
            
            <guid>https://lampreylabs.com/posts/2022/07/practical-reverse-engineering-exercise-3-page-17/</guid>
            <description>Table of Contents  Question Answer  Question In the example function, addme, what would happen if the stack pointer were not properly restored before executing RET?
Answer Here is the addme function for reference:
push ebp mov ebp, esp movsx eax, word ptr [ebp + 8h] movsx ecx, word ptr [ebp + 0Ch] add eax, ecx mov esp, ebp pop ebp ret In this particular case, ESP remains unmodified(equal to EBP) so mov esp, ebp can be safely omitted from the function epilogue.</description>
            <content type="html"><![CDATA[<h2 id="table-of-contents">Table of Contents</h2>
<ul>
<li><a href="#question">Question</a></li>
<li><a href="#answer">Answer</a></li>
</ul>
<h2 id="question">Question</h2>
<p>In the example function, <code>addme</code>, what would happen if the stack pointer
were not properly restored before executing <code>RET</code>?</p>
<h2 id="answer">Answer</h2>
<p>Here is the <code>addme</code> function for reference:</p>
<pre><code class="language-x86asm" data-lang="x86asm">push ebp
mov ebp, esp
movsx eax, word ptr [ebp + 8h]
movsx ecx, word ptr [ebp + 0Ch]
add eax, ecx
mov esp, ebp
pop ebp
ret
</code></pre><p>In this particular case, <code>ESP</code> remains unmodified(equal to <code>EBP</code>) so <code>mov esp, ebp</code> can be safely omitted from the function epilogue.</p>
<p>However, we should remember that we pushed <code>EBP</code> onto the stack in the function prologue and now the top of the stack no longer contains the <code>retaddr</code> so if we removed the <code>pop ebp</code> instruction, the stack would become unbalanced and the subsequent <code>ret</code> instruction would transfer control back to saved <code>EBP</code> register value(which is probably not the valid <code>retaddr</code>) causing undefined behaviour or program crash.</p>
<p><img src="/img/balanced-stack-meme.jpg" alt="balanced-stack-meme" title="balanced-stack-meme"></p>
]]></content>
        </item>
        
        <item>
            <title>Practical Reverse Engineering - Exercise 2, Page 17</title>
            <link>https://lampreylabs.com/posts/2022/07/practical-reverse-engineering-exercise-2-page-17/</link>
            <pubDate>Tue, 19 Jul 2022 00:00:00 +0000</pubDate>
            
            <guid>https://lampreylabs.com/posts/2022/07/practical-reverse-engineering-exercise-2-page-17/</guid>
            <description>Table of Contents  Question Answer  Question Come up with at least two code sequences to set EIP to 0xAABBCCDD.
Answer There are several instructions in the x86 ISA to manipulate EIP register(control flow instructions) but in this exercise, we are going to see two of the most popular ones(and something which we&amp;rsquo;ve already encountered before in the previous exercise).
 CALL  call 0xAABBCCDD The call instruction is used to call a procedure; it pushes the retdaddr on the stack before changing EIP to the call target effectively transferring control to it.</description>
            <content type="html"><![CDATA[<h2 id="table-of-contents">Table of Contents</h2>
<ul>
<li><a href="#question">Question</a></li>
<li><a href="#answer">Answer</a></li>
</ul>
<h2 id="question">Question</h2>
<p>Come up with at least two code sequences to set <code>EIP</code> to <code>0xAABBCCDD</code>.</p>
<h2 id="answer">Answer</h2>
<p>There are several instructions in the <code>x86 ISA</code> to manipulate <code>EIP</code> register(control flow instructions) but in this exercise, we are going to see two of the most popular ones(and something which we&rsquo;ve already encountered before in the previous exercise).</p>
<ol>
<li><a href="https://namazso.github.io/x86/html/CALL.html">CALL</a></li>
</ol>
<pre><code class="language-x86asm" data-lang="x86asm">call 0xAABBCCDD
</code></pre><p>The <code>call</code> instruction is used to call a procedure; it pushes the <code>retdaddr</code> on the stack before changing <code>EIP</code> to the call target effectively transferring control to it.</p>
<ol start="2">
<li><a href="https://namazso.github.io/x86/html/RET.html">RET</a></li>
</ol>
<pre><code class="language-x86asm" data-lang="x86asm">push 0xAABBCCDD
ret
</code></pre><p>The <code>ret</code> instruction is used to return from a procedure; it pops whatever&rsquo;s at the top of the stack into <code>EIP</code> register and transfers control to it.</p>
<blockquote>
<p>Fun Fact: This method of changing the instruction pointer is often used in code-reuse attacks such as <code>Return Oriented Programming(ROP)</code>.</p>
</blockquote>
]]></content>
        </item>
        
        <item>
            <title>Practical Reverse Engineering - Exercise 1, Page 17</title>
            <link>https://lampreylabs.com/posts/2022/07/practical-reverse-engineering-exercise-1-page-17/</link>
            <pubDate>Sat, 16 Jul 2022 00:00:00 +0000</pubDate>
            
            <guid>https://lampreylabs.com/posts/2022/07/practical-reverse-engineering-exercise-1-page-17/</guid>
            <description>Table of Contents  Question Answer  Question Given what you learned about CALL and RET, explain how you would read the value of EIP? Why can’t you just do MOV EAX, EIP?
Answer mov eax, eip is seen as an invalid instruction(not encodable) by any assembler since EIP is not a General Purpose Register(GPR); it is a special purpose register that is used as a pointer to the next instruction to execute(hence known as, extended instruction pointer).</description>
            <content type="html"><![CDATA[<h2 id="table-of-contents">Table of Contents</h2>
<ul>
<li><a href="#question">Question</a></li>
<li><a href="#answer">Answer</a></li>
</ul>
<h2 id="question">Question</h2>
<p>Given what you learned about <code>CALL</code> and <code>RET</code>, explain how you would read
the value of <code>EIP</code>? Why can’t you just do <code>MOV EAX, EIP</code>?</p>
<h2 id="answer">Answer</h2>
<p><code>mov eax, eip</code> is seen as an invalid instruction(not encodable) by any assembler since <code>EIP</code> is not a <code>General Purpose Register(GPR)</code>; it is a special purpose register that is used as a pointer to the next instruction to execute(hence known as, <em>extended</em> instruction pointer).</p>
<p>However, there are a couple of tricks to get <code>EIP</code> register value by reading it from the stack following the execution of the <code>call</code> instruction.</p>
<p>Consider the following assembly subroutine(I&rsquo;m using <a href="https://docs.microsoft.com/en-us/cpp/assembler/masm/microsoft-macro-assembler-reference?view=msvc-170">MASM</a> as the assembler):</p>
<pre><code class="language-x86asm" data-lang="x86asm">; Obtain instruction pointer(EIP) register value
OPTION LANGUAGE: SYSCALL
@get_eip@0 PROC PUBLIC
  ; Function prologue - save the non-volatile registers onto the stack and perform explicit stack frame linkage
  push ebp                      ; ESP = ESP - 0x4 and [ESP] = EBP, preserve the current base frame pointer on the stack
  mov ebp, esp                  ; EBP = ESP, create a new local stack frame within the callee by setting the base frame pointer to point to the current top of the stack

  ; Get the address of the instruction in the calling function immediately after the call instruction that will be executed after control returns to the caller
  mov eax, dword ptr [ebp + 4h] ; EAX = [EBP + 0x4], obtain the return address from the stack and store it into EAX

  ; Function epilogue - perform cleanup and return EAX register value to the calling procedure
  ;leave
  ;mov esp, ebp                 ; ESP = EBP, restore the stack by releasing the local stack frame
  pop ebp                       ; EBP = [ESP] and ESP = ESP + 0x4, restore the caller's base frame pointer
  ret                           ; EIP = [ESP] and ESP = ESP + 0x4, return from procedure
@get_eip@0 ENDP
OPTION LANGUAGE: C
</code></pre><p>And the corresponding function declaration in a header file to be able to call it from <code>C/C++</code> code:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#f00">extern</span> <span style="color:#87ceeb">&#34;C&#34;</span> <span style="color:#f00">__declspec</span>(noinline) DWORD <span style="color:#f00">__fastcall</span> get_eip(
  <span style="color:#ee82ee">void</span>
);
</code></pre></div><p>Note that the same function could also be written in <code>C</code> instead of assembly like so:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">DWORD <span style="color:#f00">__fastcall</span> <span style="color:#ff0">get_eip</span>(<span style="color:#ee82ee">void</span>) {
  <span style="color:#f00">return</span> (DWORD)_ReturnAddress();
}
</code></pre></div><p>To get <code>EIP</code> register value, we call the above subroutine:</p>
<p><img src="/img/before-call.PNG" alt="before-call" title="before-call"></p>
<p>After the <code>call</code> instruction is executed, <code>retaddr</code> is pushed onto the stack and <code>EIP</code> value is changed to the <code>call</code> target.</p>
<p><img src="/img/after-call.PNG" alt="after-call" title="after-call"></p>
<p>Note that the top of the stack now contains the return address. Also, note that <code>WinDbg</code> stack view displays lower memory addresses higher and higher memory addresses lower and that&rsquo;s why the stack appears to grow in the upward direction here.</p>
<p>We can read the <code>retaddr</code> from the stack by reading memory at address (<em>base frame pointer</em> + 0x4) and storing it into <code>EAX</code>.</p>
<p><img src="/img/get-retaddr.PNG" alt="get-retaddr" title="get-retaddr"></p>
<p>Finally, when the <code>ret</code> instruction is executed, the <code>retaddr</code> is popped from the stack into <code>EIP</code>.</p>
<p><img src="/img/eip.PNG" alt="eip" title="eip"></p>
<p>Note that after returning from the subroutine, <code>EAX</code> now contains the same value as <code>EIP</code>.</p>
<p>Another important thing to note is that using the <code>call $+5; pop eax</code> technique should be avoided altogether to prevent messing up the <code>Return Address Stack(RAS)</code> and causing branch mispredictions on older <code>Pentium Pro</code> processors.</p>
]]></content>
        </item>
        
        <item>
            <title>Practical Reverse Engineering - Exercise 1, Page 11</title>
            <link>https://lampreylabs.com/posts/2022/07/practical-reverse-engineering-exercise-1-page-11/</link>
            <pubDate>Wed, 13 Jul 2022 00:00:00 +0000</pubDate>
            
            <guid>https://lampreylabs.com/posts/2022/07/practical-reverse-engineering-exercise-1-page-11/</guid>
            <description>Table of Contents  Question Answer  Question This function uses a combination SCAS and STOS to do its work. First, explain what is the type of the [EBP+8] and [EBP+C] in line 1 and 8, respectively. Next, explain what this snippet does.
01: mov edi, [ebp + 8] 02: mov edx, edi 03: xor eax, eax 04: or ecx, 0FFFFFFFFh 05: repne scasb 06: add ecx, 2 07: neg ecx 08: mov al, [ebp + 0Ch] 09: mov edi, edx 10: rep stosb 11: mov eax, edx Answer [EBP + 8h] appears to be a char buffer pointer/PCHAR(size = 4 bytes) since it is loaded into EDI register which is then implicitly used by scasb instruction with repne prefix as the memory operand address to compare for a particular byte value specified by AL register.</description>
            <content type="html"><![CDATA[<h2 id="table-of-contents">Table of Contents</h2>
<ul>
<li><a href="#question">Question</a></li>
<li><a href="#answer">Answer</a></li>
</ul>
<h2 id="question">Question</h2>
<p>This function uses a combination <code>SCAS</code> and <code>STOS</code> to do its work. First, explain what is the type of the <code>[EBP+8]</code> and <code>[EBP+C]</code> in line 1 and 8, respectively. Next, explain what this snippet does.</p>
<pre><code class="language-x86asm" data-lang="x86asm">01: mov edi, [ebp + 8]
02: mov edx, edi
03: xor eax, eax
04: or ecx, 0FFFFFFFFh
05: repne scasb
06: add ecx, 2
07: neg ecx
08: mov al, [ebp + 0Ch]
09: mov edi, edx
10: rep stosb
11: mov eax, edx
</code></pre><h2 id="answer">Answer</h2>
<p><code>[EBP + 8h]</code> appears to be a char buffer pointer/<code>PCHAR</code>(size = 4 bytes) since it is loaded into <code>EDI</code> register which is then implicitly used by <code>scasb</code> instruction with <code>repne</code> prefix as the memory operand address to compare for a particular byte value specified by <code>AL</code> register.</p>
<p><code>[EBP + 0Ch]</code> appears to be a <code>CHAR</code>(size = 1 byte) since it is loaded into <code>AL</code> register which is then implicitly used by <code>stosb</code> instruction with <code>rep</code> prefix as the byte value to store into the destination operand given by <code>EDI</code> register.</p>
<p>Line 1 sets <code>EDI</code> to the value at address <code>(EBP+8h)</code> which is probably the first argument(<code>PCHAR</code>) passed to this function following the <code>__cdecl/__stdcall</code> calling convention.</p>
<p>Line 2 sets <code>EDX</code> with <code>EDI</code>, essentially saving a copy of the first parameter in <code>EDX</code> register. This is necessary because in Line 5 when <code>scasb</code> is used, it automatically increments/decrements <code>EDI</code> based on <code>EFLAGS.DF</code>, therefore, trashing the original value.</p>
<p>Line 3 performs <code>Bitwise Exclusive OR</code> operation on <code>EAX</code> with itself, thereby clearing it to 0.</p>
<p>Line 4 performs <code>Bitwise Inclusive OR</code> operation on <code>ECX</code> with <code>0xFFFFFFFF</code>, thereby setting it to <code>0xFFFFFFFF</code>.</p>
<p>Line 5 uses the <code>scasb</code> instruction to scan the string(pointed to by <code>EDI</code>) for the <code>NULL</code> byte terminator(given by <code>AL</code>) one byte at a time. <code>repne</code> prefix(which uses <code>ECX</code> as an unsigned counter) is used to indicate to keep scanning until it finds the <code>NULL</code> byte. This will also decrement <code>ECX</code> for each byte scanned until the <code>NULL</code> byte is encountered.</p>
<p>Line 6 adds 2 to <code>ECX</code> to compensate for counting from -1 instead of 0 and including the <code>NULL</code> byte.</p>
<p>Line 7 replaces <code>ECX</code> with its 2&rsquo;s complement, thereby turning it into a positive value. Now, <code>ECX</code> contains the length of the string excluding the <code>NULL</code> byte.</p>
<p>Line 8 sets <code>AL</code> to the value at address <code>(EBP+0xC)</code> which is probably the second argument(<code>CHAR</code>) passed to this function following the <code>__cdecl/__stdcall</code> calling convention.</p>
<p>Line 9 sets <code>EDI</code> with <code>EDX</code> to prime it with the destination operand address for the next instruction.</p>
<p>Line 10 uses the <code>stosb</code> instruction to store the byte(given by <code>AL</code>) into the string(pointed to by <code>EDI</code>) one byte at a time. <code>rep</code> prefix is used to indicate to keep setting until <code>ECX</code> decrements to 0(i.e. the entire length of the string).</p>
<p>Line 11 sets <code>EAX</code> with <code>EDX</code> now pointing to the overwritten string. <code>EAX</code> register holds the return value when returning from a procedure.</p>
<p>Based on all of the above, we can construct a decompilation of the assembly snippet as follows:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#f00">extern</span> <span style="color:#87ceeb">&#34;C&#34;</span> <span style="color:#f00">__declspec</span>(noinline) PCHAR <span style="color:#f00">__cdecl</span> asm_func(
  _In_ PCHAR pchBuffer,
  _In_ CHAR  chValue
) {
  <span style="color:#f00">return</span> (PCHAR)memset(pchBuffer, chValue, strlen(pchBuffer));
}
</code></pre></div>]]></content>
        </item>
        
    </channel>
</rss>
